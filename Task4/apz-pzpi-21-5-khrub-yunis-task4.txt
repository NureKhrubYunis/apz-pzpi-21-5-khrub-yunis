1 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

У даному застосунку буде представлено 3 актори(див.рис. 1.1):
•	Адміністратор
•	Працівник
•	Клієнт
Медична платформа спрямована на покращення професійного розвитку лікарів та медичних експертів, забезпечення швидкого доступу до актуальної медичної інформації та зміцнення професійних контактів.
Медична платформа для обміну знаннями та розвитку професійних мереж забезпечує наступні можливості:

2 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма компонентів в UML (див.рис. 2.1) використовується для візуалізації організації та взаємозв'язків компонентів у системі. Давайте розглянемо приблизну структуру діаграми компонентів для ASP.NET веб-додатка:

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Було аналізовано структуру клієнтської частини програмного забезпечення (див. рис 3.1). Ця діаграма пакетів ілюструє організацію фронтенду ASP.NET програми, яка використовує шаблон Layout для створення єдиної структури інтерфейсу. Головний пакет "Pages" включає в себе кілька файлів і підпакет "Shared", який містить загальні компоненти для всієї програми. Пакет "Shared" містить файли _Layout.cshtml, який забезпечує уніфікований дизайн та структуру всіх сторінок, _ValidationScriptsPartial.cshtml для валідації скриптів, _ViewImports.cshtml для імпорту необхідних просторів імен та _ViewStart.cshtml, який задає загальні налаштування для всіх сторінок у цьому пакеті. Основні сторінки включають Admin.cshtml для керування платформою адміністратора, Direct.cshtml для перегялду списку діалогів, Drug.cshtml для перегляду детальної інформації про конкретний медичний препарат, Drugs.cshtml зі списком медичних препаратів, Index.cshtml як головну сторінку платформи, Login.cshtml для входу користувачів до системи, Messages.cshtml для перегляду та відправки повідомлень між користувачами та Profile.cshtml для профілю користувача. Ця структура забезпечує логічний поділ функціоналу та дозволяє ефективно організувати роботу над проектом, розділяючи загальні компоненти та специфічні сторінки.

4 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Діаграма діяльності відображає ключові взаємодії між працівником та системою веб-додатка для ефективної медичнї співпраці. Починаючи з входу  в систему, користувач баче свій профіль, Layout який надає можливість переходити по різним розділам.
            
5 LAYOUT

Даний Layout визначає основний каркас та зовнішній вигляд веб-сторінок Medoxity(див. додаток А). Нижче наведено текстовий опис його ключових елементів:
	Компонент Layout для медичної платформи "Medoxity" забезпечує єдину структуру для всіх сторінок додатку, надаючи загальні елементи інтерфейсу користувача, такі як заголовок, навігаційне меню, підвал сторінки та підключення необхідних стилів і скриптів.
1.	Метатеги та Заголовок:
•	Визначені метатеги для правильної кодировки та адаптації розміру екрану.
•	Заголовок сторінки формується на основі ViewData["Title"] та завданої фіксованої частини "Medoxity".
2.	Підключення Стилів та Скриптів:
•	Використовується Bootstrap для стилізації та респонсивного дизайну.
•	Додатковий стиль визначено у файлі site.css.
•	Підключаються бібліотеки jQuery та Bootstrap для реалізації функціоналу.
3.	Хедер:
•	Хедер має фоновий колір #3498db та текст у білому кольорі.
•	Навігаційний бар (navbar) знаходиться в середині хедера та містить логотип "Medoxity" та переключальник навігації для екранів з меншим розміром.
4.	Навігаційне Меню:
•	Містить посилання на різні розділи
5.	Контентна Область:
•	Головний контейнер "container" обгортає вміст кожної сторінки.
•	Головний рольовий контейнер "main" містить основний вміст сторінок, який динамічно вставляється через @RenderBody().
6.	Футер:
•	Футер містить текстову інформацію про копірайт "© 2024 - Medoxity", а також посилання на розділ "Privacy".

6 ІНТЕРФЕЙС

Клієнтський інтерфейс Medoxity спроектований з урахуванням зручності та ефективності взаємодії для користувачів, що працюють у медичній сфері. Основні елементи і функції інтерфейсу включають:
Навігаційний Бар
Розташований у верхній частині екрану, навігаційний бар містить логотип "Medoxity" та основні розділи, такі як "Home", "Direct", "Profile" та "Drugs". Активне посилання виділяється, вказуючи на поточну сторінку, що дозволяє користувачам легко орієнтуватися в системі.
Головний Вміст
Великий контентний блок займає основну частину екрану та відображає конкретний вміст кожної сторінки, який динамічно вставляється через @RenderBody(). Дизайн та розташування елементів дозволяють зосередитися на ключовій інформації та функціоналітеті.
Футер
Розташований у нижній частині екрану, футер містить копірайт "© 2024 - Medoxity" та посилання на розділ "Privacy". Це забезпечує зручний доступ до політики конфіденційності та підсилює відчуття завершеності сторінки.
Адаптивний Дизайн
Інтерфейс підтримує адаптивний дизайн для роботи на різних пристроях та розмірах екрану. Це забезпечує зручний доступ до функціоналу як на комп'ютерах, так і на мобільних пристроях, покращуючи загальний досвід користування платформою.
Вихід із Системи
Включено посилання "LogOut", яке дозволяє користувачам безпечно вийти зі свого облікового запису, забезпечуючи безпеку та конфіденційність даних.
Технології та Інструменти
Для створення інтерфейсу використовується фреймворк ASP.NET Razor Pages, який дозволяє динамічно рендерити сторінки на сервері. Bootstrap забезпечує адаптивність та стилізацію елементів інтерфейсу, тоді як jQuery використовується для інтерактивності та динамічних змін на сторінці.
Архітектура
Архітектура платформи складається з компонентів, що забезпечують логічний поділ функціоналу:
•	Controllers: Відповідають за обробку запитів користувачів та передають їх до відповідних сервісів.
•	Models: Містять моделі даних, що використовуються в програмі.
•	Repositories: Забезпечують доступ до бази даних, дозволяючи зберігати та витягувати дані.
•	Services: Містять бізнес-логіку програми, реалізуючи основні функції системи.
Безпека
Для забезпечення безпеки користувачів, платформа використовує аутентифікацію та авторизацію, що реалізовані за допомогою ASP.NET Identity. Це дозволяє надійно захищати дані користувачів та обмежувати доступ до конфіденційної інформації.
Вигляд Сторінки
Розглянемо те, як виглядає сторінка клієнтського інтерфейсу (див. додаток Б, рис. Б.1). Сторінка поєднує зручний навігаційний бар, основний контентний блок та інформативний футер, забезпечуючи цілісне та ефективне використання інтерфейсу.


ВИСНОВКИ

Отже, протягом виконання лабораторної роботи, було набуто навичок у побудуванні веб клієнтської частини системи, аналізу коду, аналізу архітектури та прийнятя інженерних рішень та використання діаграм у побудуванні та проектуванні клієнтської частини проекту.