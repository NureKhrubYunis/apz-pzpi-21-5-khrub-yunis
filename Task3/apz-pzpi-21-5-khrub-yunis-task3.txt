1 АРХІТЕКТУРА

Пристрій збирає дані, такі як частота серцевих скорочень (BPM)  та температура тіла, використовуючи відповідні датчики, і передає їх на сервер через Wi-Fi для подальшого аналізу та зберігання. Проект використовує мікроконтролер WiFIEsp для підключення до інтернету та датчик PulseSensorPlayground для вимірювання пульсу і температури. 
	Ця система складається з трьох основних компонентів:
1.	Модуль збору даних
2.	Модуль обробки даних
3.	Модуль передачі даних
Програмне забезпечення пристрою включає бібліотеки Arduino: WiFiEsp.h, Wire.h та PulseSensorPlayground.h. Скетч, написаний для збору даних та їх передачі, реалізує логіку збору даних з датчиків та передачі їх на сервер через Wi-Fi. Сервер приймає дані від смарт-девайсу, зберігає їх у базі даних і виконує аналіз для надання корисної інформації користувачу. WiFiEsp є економічно вигідним та добре підтримуваним мікроконтролером, що робить його ідеальним для IoT проектів. Він забезпечує стабільне з'єднання з інтернетом і достатню обчислювальну потужність для обробки даних з датчиків. PulseSensorPlayground є надійним і точним датчиком для вимірювання частоти серцевих скорочень та рівня кисню в крові, що є ключовими показниками здоров'я. Він легко інтегрується з Arduino та іншими мікроконтролерами. Ця архітектура забезпечує надійний та ефективний спосіб збору та передачі даних про стан здоров'я користувача. 
Використання WiFiEsp та відповідних датчиків дозволяє створити доступний і функціональний пристрій для моніторингу ключових показників здоров'я. Така архітектура підходить для розробки IoT пристроїв з мінімальними витратами та високою точністю вимірювань. ASP.NET Core для реалізації серверної частини, яка приймає та обробляє дані зі смарт-девайсу є чудовим вибором. Це дозволяє скористатися потужними можливостями .NET для обробки запитів та роботи з базою даних.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

У даному прикладу буде представлено 3 актори(див.рис 2.1):
•	Користувач з показнимками здоров’я
•	Смарт девайс 
•	Сервер
Ця діаграма описує прецеденти, які стостуються взаємодії системи зі смарт девайсом та саму роботу девайсу

3 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

Активація:
Інженер надсилає запит на активацію смарт-пристрою. Смарт-пристрій отримує запит і переходить у стан активації.
Конфігурація:
Після успішної активації смарт-пристрій переходить у стан "Конфігурація". Інженер надсилає параметри конфігурації (наприклад, налаштування мережі, пороги температури). Смарт-пристрій отримує параметри та зберігає конфігурацію. Смарт-пристрій підтверджує успішне збереження конфігурації та готовність до наступного кроку. Якщо конфігурація не вдалася, система повертає пристрій у початковий стан для повторної активації..
Увімкнення:
Користувач взаємодіє з пристроєм (наприклад, натискає кнопку увімкнення). Смарт-пристрій переходить у стан "Увімкнення". Пристрій ініціює процес увімкнення, перевіряє конфігурацію та готується до виконання команд. Якщо конфігурація пристрою відповідає всім вимогам, пристрій переходить до готовності виконувати команди користувача. У випадку проблем з конфігурацією, пристрій інформує користувача про помилку та повертається у стан "Конфігурація".
Кінцевий стан:
Смарт-пристрій готовий до виконання команд або повернення до початкового стану в разі невдачі.

4 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Для роботи зі смарт девайсом, а також перед його запуском,  потрібно зробити превентивні налаштування пристрою.
	Для цього потрібно зробити усі необхідні процедури, їх показує UML діаграма діяльності(див. додаток А, див.рис. А1). Давайте перелічимо деякі дії, які необхідні:
•	Програмування Wi-Fi параметрів:
У коді Arduino визначаються значення SSID та пароля для доступу до Wi-Fi мережі.
•	Завантаження коду у пристрій:
Компіляція та завантаження коду у пристрій через Arduino IDE.
•	Запуск пристрою:
Пристрій стартує із попередньо заданими параметрами Wi-Fi.
•	Конфігурація пристрою:
Додаткові етапи конфігурації (якщо передбачено) можуть бути виконані після старту пристрою. Наприклад, пристрій може очікувати на введення параметрів через Serial монітор, веб-інтерфейс або інші методи.
•	Підключення до Wi-Fi мережі:
Пристрій використовує попередньо задані параметри Wi-Fi для підключення до мережі.
            
5 ОБРОБКА ДАНИХ

Інформація, яка здобувається завдяки смарт девайсам, також можуть бути передані на сервер. Розглянемо приклад, якби оброблялися ці дані.

6 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Діаграма пакетів – інструмент для відображення структури програми, розгляданої на рівні пакетів або модулів. В контексті коду для Arduino, головний файл, наприклад, sketch.ino, можна розглядати як основний пакет.
Для відображення зв'язків між sketch.ino та іншими файлами, такими як WiFiEsp.h (див.рис. 6.1), доцільно використовувати стрілки "використання" (Use). Ці стрілки ілюструють, що один пакет використовує функціональність іншого

ВИСНОВКИ

Отже, було розроблено програмне забезпечення для смарт девайсу та для обробки даних, які передає смарт девайс.
Було прийнято певні інженерні рішення, які вплинули на реалізацію та привели до певної архітектурної будови.