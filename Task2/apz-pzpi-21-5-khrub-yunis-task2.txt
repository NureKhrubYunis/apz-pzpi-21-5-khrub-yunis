1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система представляє собою Web Application, що складається з певних частин системи. Головний з них - це RESTful Web API. Він надає доступ до функціональності платформи для медичних працівників. Ця платформа дозволяє користувачам шукати інформацію про лікарські засоби, обмінюватися знаннями та досвідом, а також розвивати професійні мережі. Система складається з декількох основних компонентів: Models, Views, Controllers, база даних, контекст даних, конфігураційні файли, 
	База даних використовується для зберігання даних усіх мікросервісів.Це ключовий ресурс системи, бо він має всі важливі та конфіденційні дані, такі як інформація про користувачів, лікарські засоби, коментарі, документи та повідомлення. Забезпечення безпеки бази даних є критичним завданням, оскільки вона зберігає найбільш дорогі активи платформи, для будь-якої платформи регулярні та заплановані бекапи баз даних є критично обов’язковою дією. У нашому випадку використовується реляційна база даних MS SQL.
	Комунікація між компонентами проходить, завдяки HTTP. 
	Система складається з таких частин:
•	Сервер 
•	Веб-клієнт
•	Мобайл-клієнт
Функціонал системи, який взаємодіє з базою даних, оброблює дані, та виконує обчислення знаходиться та виконується на сервері платформи для фармомедичної колаборації, інші клієнтські мікросервіси, забезпечують frontend системи, вони приймають та візуалізують дані, які було отримано через сервер завдяки запиту GET. POST запити у клієнтській частині створюють нові дані та роблять запити до інших підвидів функцій приводять до змін у базі даних медчиної платформи. PUT запити приводять к зверненню до функції, яка вносить зміни до існуючих даних. 

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Давайте розглянемо deployment діаграму (див. додаток Б, див. рис Б.1), щоб краще зрозуміти, як компоненти системи взаємодіють між собою.
1.	Веб-сервер (C# ASP.NET):
•	Локалізація: Дата-центр або серверний простір.
•	Роль: Забезпечує серверну логіку, обробку запитів та взаємодію з базою даних MS SQL.
2.	База даних (MS SQL):
•	Локалізація: Дата-центр або серверний простір.
•	Роль: Зберігання та управління даними 
3.	Android Клієнтська Додаток:
•	Локалізація: Мобільний пристрій (Android).
•	Роль: Надає користувачам зручний інтерфейс для взаємодії з системою, отримання інформації та управління параметрами.
4.	Arduino (Мікроконтролер):
•	Локалізація: Близько до фізичного об'єкта.
•	Роль: Забезпечує збір параметрів контролю.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Сервер буде контактує з клієнтом через HTTP запити, архітектура сервера та технології його були використані для створення Web API, які повертають дані у форматі JSON, класи контролерів у такому випадку наслідуються від “ControllerBase”. Такий підхід контакту між сервером та іншими частинами платформи забезпечує велику масштабованість та гнучкість. Архітектуру системи можна зазначити по більшій частині як монолітну, дана архітектура забезпечує легке тестування, більш легку та узгоджену розгортку, більш швидку роботу при взаємодії компонентів.  Як сервер використовується фреймворк ASP.NET. Проєкт має багатошарову архітектуру, яка складається з контролерів, моделей, контексту бази даних, конфігураційних файлів та головного файлу програми. Контролери керують логікою обробки запитів від користувачів і повертають відповідні відповіді. Вони викликають методи репозиторіїв для доступу до даних. Моделі, що включають Comment.cs, Document.cs, Drug.cs, Like.cs, Login.cs, Message.cs, Rating.cs, Register.cs та User.cs, представляють структуру даних, які зберігаються в базі даних. Вони використовуються для створення, читання, оновлення і видалення записів у базі даних. Контекст бази даних, представлений MedicalPlatformContext.cs, відповідає за взаємодію з базою даних і містить DbSet-и для кожної моделі, що дозволяє виконувати запити до бази даних. Конфігураційні файли, такі як appsettings.json та appsettings.Development.json, зберігають налаштування, включаючи строки підключення до бази даних, параметри логування та налаштування для зовнішніх сервісів. Головний вхідний файл програми, Program.cs, містить метод Main, який є точкою входу для програми, налаштовує веб-сервер і виконує початкову конфігурацію.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

У даному застосунку буде представлено 3 актори:
•	Адміністратор
•	Працівник
•	Клієнт
Веб-платформа дозволяє користувачам здійснювати хавантаження своїх медчиних даних та ліків, отримати інформацію щодо своїх даних та отримати через платформу допомогу та залишати фідбек. Для медичних працівників надається можливість взаємодіяти з замовленнями та контролювати стан лікарських засобів, адміністратору надаються можливості найвищого рівня доступу.Мобільний застосунок надає можливість людям передивитися свої медичні документи та стан здоров’я.
За допомогою Smart Device користувачи зможуть зрозуміти свій стан здоров’я.
У діаграмі Use Case було представлено можливості користувачів(див. додаток А, див.рис. А.1).              

5 ПОБУДОВА ER-ДІАГРАМИ

ER-діаграма нам презентує нашу спроектовану базу даних. База даних вмикає в себе 7 сутностей(див.рис 5.1), та деякі між собою пов’язані
1.	Users:
•	Кожен запис в таблиці Users має унікальний ідентифікатор UserID.
•	Інші таблиці можуть посилатися на цей UserID через зовнішні ключі, наприклад, UserID у таблицях Comments, Likes, Rating, Documents та Messages.
2.	Drug:
•	Кожен запис в таблиці Drug має унікальний ідентифікатор DrugID.
•	Інші таблиці можуть посилатися на цей DrugID через зовнішні ключі, наприклад, DrugID у таблицях Comments та Rating.
3.	Comments:
•	Кожен запис в таблиці Comments має унікальний ідентифікатор CommentID.
•	Є зовнішні ключі UserID і DrugID, які посилаються відповідно на UserID у таблиці Users і DrugID у таблиці Drug.
4.	Likes:
•	Кожен запис в таблиці Likes має унікальний ідентифікатор LikeID.
•	Містить зовнішні ключі UserID і CommentID, які посилаються відповідно на UserID у таблиці Users і CommentID у таблиці Comments.
5.	Rating:
•	Кожен запис в таблиці Rating має унікальний ідентифікатор RatingID.
•	Містить зовнішні ключі UserID і DrugID, які посилаються відповідно на UserID у таблиці Users і DrugID у таблиці Drug.
6.	Documents:
•	Кожен запис в таблиці Documents має унікальний ідентифікатор DocumentID.
•	Містить зовнішній ключ UserID, який посилається на UserID у таблиці Users.
7.	Messages:
•	Кожен запис в таблиці Messages має унікальний ідентифікатор MessageID.
•	Містить зовнішні ключі SenderID і ReceiverID, які посилаються відповідно на UserID у таблиці Users.

6 СПЕЦИФІКАЦІЯ REST

Опис Ендпоінтів
1.	/users/register (POST):
•	Зареєструвати нового користувача. Потрібно передати дані: ім'я, електронну пошту, пароль та інші необхідні дані.
2.	/users/login (POST):
•	Увійти в систему. Потрібно передати електронну пошту та пароль.
3.	/users/{userID} (GET):
•	Отримати інформацію про конкретного користувача за його унікальним ідентифікатором.
4.	/users/{userID} (PUT):
•	Оновити інформацію про конкретного користувача.
5.	/drugs (GET):
•	Отримати список всіх лікарських засобів з можливістю фільтрації за назвою, категорією, виробником тощо.
6.	/drugs/{drugID} (GET):
•	Отримати детальну інформацію про конкретний лікарський засіб за його унікальним ідентифікатором.
7.	/drugs/search (GET):
•	Пошук лікарських засобів за параметрами, такими як назва, діюча речовина, показання до застосування тощо.
8.	/comments (GET):
•	Отримати список всіх коментарів до лікарських засобів.
9.	/comment (POST):
•	Додати новий коментар до лікарського засобу. Потрібно передати дані: текст коментаря, UserID, DrugID.
10.	/comments/{commentID} (GET):
•	Отримати інформацію про конкретний коментар за його унікальним ідентифікатором.
11.	/comments/{commentID} (DELETE):
•	Видалити коментар за його унікальним ідентифікатором.
12.	/comments/{commentID}/likes (POST):
•	Додати лайк до коментаря. Потрібно передати UserID.
13.	/comments/{commentID}/likes (DELETE):
•	Видалити лайк з коментаря.
14.	/ratings (GET):
•	Отримати список всіх рейтингів лікарських засобів.
15.	/ratings (POST):
•	Додати новий рейтинг до лікарського засобу. Потрібно передати дані: оцінка, UserID, DrugID.
16.	/ratings/{ratingID} (GET):
•	Отримати інформацію про конкретний рейтинг за його унікальним ідентифікатором.
17.	/ratings/{ratingID} (PUT):
•	Оновити інформацію про конкретний рейтинг.
18.	/ratings/{ratingID} (DELETE):
•	Видалити рейтинг за його унікальним ідентифікатором.
19.	/documents (GET):
•	Отримати список всіх документів, доданих користувачами.
20.	/documents (POST):
•	Додати новий документ. Потрібно передати дані: назва, опис, файл, UserID.
21.	/documents/{documentID} (GET):
•	Отримати інформацію про конкретний документ за його унікальним ідентифікатором.
22.	/documents/{documentID} (PUT):
•	Оновити інформацію про конкретний документ.
23.	/documents/{documentID} (DELETE):
•	Видалити документ за його унікальним ідентифікатором.
24.	/messages (GET):
•	Отримати список всіх повідомлень між користувачами.
25.	/message (POST):
•	Надіслати нове повідомлення. Потрібно передати дані: текст повідомлення, SenderID, ReceiverID.
26.	/messages/{messageID} (GET):
•	Отримати інформацію про конкретне повідомлення за його унікальним ідентифікатором.
27.	/messages/{messageID} (DELETE):
•	Видалити повідомлення за його унікальним ідентифікатором.

7 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Було аналізовано структуру програмного забезпечення. Пакети, які є складовими проекту було виділено на діаграмі пакетів(див.рис 7.1). Для реалізації проекту було використано пакет EntityFrameworkCore, EntityFrameworkCore.SqlServer для роботи з MS SQL та EntityFrameworkCore.Tools. У папці Models у нас зберігаються класи для моделювання сутностей бази даних та обробник помилок.

ВИСНОВКИ

ТЕКСТ РОЗДІЛУ БЕЗ ПОРОЖНІХ РЯДКІВ

ДОДАТОК А

Специфікація REST